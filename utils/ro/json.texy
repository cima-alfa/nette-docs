Lucrul cu JSON
**************

.[perex]
[api:Nette\Utils\Json] este o clasă statică cu funcții pentru codificarea și decodarea formatului JSON. Gestionează vulnerabilitățile diferitelor versiuni PHP și aruncă excepții în caz de erori.


Instalare:

```shell
composer require nette/utils
```

Toate exemplele presupun că a fost creat un alias:

```php
use Nette\Utils\Json;
```


Utilizare
=========


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Convertește valoarea `$value` în format JSON.

Când `$pretty` este setat, formatează JSON-ul pentru o citire și claritate mai ușoară:

```php
Json::encode($value); // returnează JSON compact
Json::encode($value, pretty: true); // returnează JSON formatat (pretty-printed)
```

Cu `$asciiSafe`, generează ieșire în ASCII, adică înlocuiește caracterele unicode cu secvențe `\uxxxx`:

```php
Json::encode('țâșni', asciiSafe: true);
// '"\u021b\u00e2\u0219ni"'
```

Parametrul `$htmlSafe` asigură că ieșirea nu va conține caractere cu semnificație specială în HTML (`<`, `>`, `&`):

```php
Json::encode('unu<doi & trei', htmlSafe: true);
// '"unu\u003Cdoi \u0026 trei"'
```

Setarea `$forceObjects` la `true` forțează codificarea array-urilor cu chei numerice ca obiecte JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Aruncă o excepție `Nette\Utils\JsonException` în caz de eroare (ex. date necodificabile).

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Tratarea excepției
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Parsează un șir JSON `$json` și îl convertește într-o valoare PHP.

Setarea `$forceArray` la `true` forțează returnarea de array-uri asociative în loc de obiecte `stdClass`:

```php
Json::decode('{"variabila": true}'); // returnează obiect stdClass
Json::decode('{"variabila": true}', forceArrays: true); // returnează array ['variabila' => true]
```

Aruncă o excepție `Nette\Utils\JsonException` în caz de eroare de parsare.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Tratarea excepției
}
```


Cum se trimite JSON dintr-un presenter?
=======================================

Puteți utiliza metoda `$this->sendJson($data)`, pe care o puteți apela, de exemplu, într-o metodă `action*()`, vezi [Trimiterea unui răspuns |application:presenters#Trimiterea răspunsului].
