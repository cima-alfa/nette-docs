Reflecție PHP
*************

.[perex]
[api:Nette\Utils\Reflection] este o clasă statică cu funcții utile pentru reflecția PHP. Scopul său este de a corecta deficiențele claselor native și de a unifica comportamentul între diferite versiuni PHP.


Instalare:

```shell
composer require nette/utils
```

Toate exemplele presupun că a fost creat un alias:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Verifică dacă reflecția are acces la comentariile PHPdoc. Comentariile pot fi indisponibile din cauza cache-ului opcode, vezi de exemplu directiva [opcache.save-comments |https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Extinde numele clasei `$name` la numele său complet calificat (FQCN) în contextul clasei `$context` (luând în considerare namespace-ul și aliasurile `use` definite în fișierul clasei `$context`). Practic, determină cum ar interpreta PHP parserul numele `$name` dacă ar fi scris în corpul clasei `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Returnează reflecția metodei care conține declarația metodei `$method`. De obicei, fiecare metodă este propria sa declarație, dar corpul metodei poate fi găsit și într-un trait și sub un alt nume.

Deoarece PHP nu oferă informații suficiente pentru a determina declarația reală, Nette utilizează propria sa heuristică, care **ar trebui să fie** fiabilă.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Returnează reflecția clasei sau trait-ului care conține declarația proprietății `$prop`. Proprietatea poate fi, de asemenea, declarată într-un trait.

Deoarece PHP nu oferă informații suficiente pentru a determina declarația reală, Nette utilizează propria sa heuristică, care **nu este** fiabilă.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Verifică dacă `$type` este un tip încorporat PHP. În caz contrar, este un nume de clasă.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Utilizați [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType].


toString($reflection): string .[method]
---------------------------------------

Convertește reflecția într-un șir inteligibil pentru om.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
