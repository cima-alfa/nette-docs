Lucrul cu numere în virgulă mobilă
**********************************

.[perex]
[api:Nette\Utils\Floats] este o clasă statică cu funcții utile pentru compararea numerelor zecimale (în virgulă mobilă).


Instalare:

```shell
composer require nette/utils
```

Toate exemplele presupun că a fost creat un alias:

```php
use Nette\Utils\Floats;
```


Motivație
=========

Vă întrebați de ce este necesară o clasă pentru compararea numerelor în virgulă mobilă? Puteți folosi operatorii `<`, `>`, `===` și gata. Nu este chiar așa. Ce credeți că va afișa acest cod?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Dacă rulați codul, unii dintre voi vor fi cu siguranță surprinși că programul a afișat `not same`.

La operațiile matematice cu numere zecimale, apar erori din cauza conversiei între sistemul zecimal și cel binar. De exemplu, `0.1 + 0.2` rezultă `0.300000000000000044…`. De aceea, la comparare trebuie să tolerăm o mică diferență începând de la o anumită zecimală.

Și exact asta face clasa `Floats`. Următoarea comparație va funcționa conform așteptărilor:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

Încercarea de a compara `NAN` va arunca o excepție `\LogicException`.

.[tip]
Clasa `Floats` tolerează diferențe mai mici de `1e-10`. Dacă aveți nevoie să lucrați cu o precizie mai mare, utilizați mai degrabă biblioteca BCMath.


Compararea numerelor în virgulă mobilă
======================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Returnează `true` dacă `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Returnează `true` dacă `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Returnează `true` dacă `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Returnează `true` dacă `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Returnează `true` dacă `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Returnează `-1` dacă `$a` < `$b`, `0` dacă sunt egale și `1` dacă `$a` > `$b`.

Poate fi utilizată, de exemplu, cu funcția `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Floats::class, 'compare']);
// $arr este acum [-3.5, 1, 2, 5]
```


Funcții auxiliare
=================


isZero(float $value): bool .[method]
------------------------------------

Returnează `true` dacă valoarea este egală cu zero.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Returnează `true` dacă valoarea este un număr întreg.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
