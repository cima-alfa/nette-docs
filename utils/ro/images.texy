Lucrul cu imagini
*****************

.[perex]
Clasa [api:Nette\Utils\Image] simplifică manipularea imaginilor, cum ar fi redimensionarea, decuparea, ascuțirea, desenarea sau combinarea mai multor imagini.


PHP dispune de un set extins de funcții pentru manipularea imaginilor, dar API-ul lor nu este foarte convenabil. Nette Framework vine, așa cum era de așteptat, cu un API elegant.

Instalare:

```shell
composer require nette/utils
```

Toate exemplele presupun că a fost creat un alias:

```php
use Nette\Utils\Image;
use Nette\Utils\ImageColor;
use Nette\Utils\ImageType;
```


Crearea unei imagini
====================

Creăm o nouă imagine true color, de exemplu, cu dimensiunile 100×200:

```php
$image = Image::fromBlank(100, 200);
```

Opțional, se poate specifica culoarea de fundal (implicit este negru):

```php
$image = Image::fromBlank(100, 200, ImageColor::rgb(125, 0, 0));
```

Sau încărcăm imaginea dintr-un fișier:

```php
$image = Image::fromFile('nette.jpg');
```


Salvarea imaginii
=================

Imaginea poate fi salvată într-un fișier:

```php
$image->save('resampled.jpg');
```

Putem specifica calitatea compresiei în intervalul 0..100 pentru JPEG (implicit 85), WEBP (implicit 80) și AVIF (implicit 30) și 0..9 pentru PNG (implicit 9):

```php
$image->save('resampled.jpg', 80); // JPEG, calitate 80%
```

Dacă formatul nu este evident din extensia fișierului, acesta poate fi specificat folosind o [constantă |#Formate]:

```php
$image->save('resampled.tmp', null, ImageType::JPEG);
```

Imaginea poate fi scrisă într-o variabilă în loc de pe disc:

```php
$data = $image->toString(ImageType::JPEG, 80); // JPEG, calitate 80%
```

sau trimisă direct în browser cu antetul HTTP `Content-Type` corespunzător:

```php
// trimite antetul Content-Type: image/png
$image->send(ImageType::PNG);
```


Formate
=======

Formatele acceptate sunt JPEG, PNG, GIF, WebP, AVIF și BMP, însă acestea trebuie să fie acceptate și de versiunea dvs. de PHP, lucru pe care îl puteți verifica cu funcția [#isTypeSupported()]. Animațiile nu sunt acceptate.

Formatul este reprezentat de constantele `ImageType::JPEG`, `ImageType::PNG`, `ImageType::GIF`, `ImageType::WEBP`, `ImageType::AVIF` și `ImageType::BMP`.

```php
$supported = Image::isTypeSupported(ImageType::JPEG);
```

Aveți nevoie să detectați formatul imaginii la încărcare? Metoda îl returnează în al doilea parametru:

```php
$image = Image::fromFile('nette.jpg', $type);
```

Detecția formatului fără încărcarea imaginii este realizată de `Image::detectTypeFromFile()`.


Redimensionare
==============

O operație frecventă este modificarea dimensiunilor imaginii. Dimensiunile actuale sunt returnate de metodele `getWidth()` și `getHeight()`.

Metoda `resize()` este utilizată pentru redimensionare. Exemplu de redimensionare proporțională astfel încât imaginea să nu depășească dimensiunile de 500x300 pixeli (fie lățimea va fi exact 500 px, fie înălțimea va fi exact 300 px, cealaltă dimensiune fiind calculată pentru a menține raportul de aspect):

```php
$image->resize(500, 300);
```

Este posibil să specificați doar o dimensiune, iar cealaltă va fi calculată:

```php
$image->resize(500, null); // lățime 500px, înălțimea se calculează

$image->resize(null, 300); // lățimea se calculează, înălțime 300px
```

Oricare dimensiune poate fi specificată și în procente:

```php
$image->resize('75%', 300); // 75 % × 300px
```

Comportamentul metodei `resize` poate fi influențat de următoarele flag-uri. Toate, cu excepția `Image::Stretch`, mențin raportul de aspect.

|---------------------------------------------------------------------------------------
| Flag                   | Descriere
|---------------------------------------------------------------------------------------
| `Image::OrSmaller` (implicit) | dimensiunile rezultate vor fi mai mici sau egale cu dimensiunile solicitate
| `Image::OrBigger`         | umple (și eventual depășește într-o dimensiune) suprafața țintă
| `Image::Cover`            | umple suprafața țintă și decupează ceea ce depășește
| `Image::ShrinkOnly`       | doar micșorare (previne mărirea unei imagini mici)
| `Image::Stretch`          | nu menține raportul de aspect


Flag-urile sunt specificate ca al treilea argument al funcției:

```php
$image->resize(500, 300, Image::OrBigger);
```

Flag-urile pot fi combinate:

```php
$image->resize(500, 300, Image::ShrinkOnly | Image::Stretch);
```

Imaginile pot fi răsturnate vertical sau orizontal specificând una dintre dimensiuni (sau ambele) ca număr negativ:

```php
$flipped = $image->resize(null, '-100%'); // răsturnare verticală

$flipped = $image->resize('-100%', '-100%'); // rotire 180°

$flipped = $image->resize(-125, 500); // redimensionare & răsturnare orizontală
```

După micșorarea imaginii, aspectul acesteia poate fi îmbunătățit printr-o ușoară ascuțire (sharpening):

```php
$image->sharpen();
```


Decupare
========

Metoda `crop()` este utilizată pentru decupare:

```php
$image->crop($left, $top, $width, $height);
```

Similar cu `resize()`, toate valorile pot fi specificate în procente. Procentele pentru `$left` și `$top` sunt calculate din spațiul rămas, similar proprietății CSS `background-position`:

```php
$image->crop('100%', '50%', '80%', '80%');
```

[* crop.svg *]


Imaginea poate fi, de asemenea, decupată automat, de exemplu, pentru a elimina marginile negre:

```php
$image->cropAuto(IMG_CROP_BLACK);
```

Metoda `cropAuto()` este un înlocuitor orientat pe obiecte pentru funcția `imagecropauto()`; puteți găsi mai multe informații în [documentația sa |https://www.php.net/manual/en/function.imagecropauto].


Culori .{data-version:4.0.2}
============================

Metoda `ImageColor::rgb()` vă permite să definiți o culoare folosind valorile roșu, verde și albastru (RGB). Opțional, puteți specifica și valoarea transparenței în intervalul 0 (complet transparent) până la 1 (complet opac), la fel ca în CSS.

```php
$color = ImageColor::rgb(255, 0, 0); // Roșu
$transparentBlue = ImageColor::rgb(0, 0, 255, 0.5); // Albastru semitransparent
```

Metoda `ImageColor::hex()` permite definirea unei culori folosind formatul hexazecimal, similar cu CSS. Acceptă formatele `#rgb`, `#rrggbb`, `#rgba` și `#rrggbbaa`:

```php
$color = ImageColor::hex("#F00"); // Roșu
$transparentGreen = ImageColor::hex("#00FF0080"); // Verde semitransparent
```

Culorile pot fi utilizate în alte metode, cum ar fi `ellipse()`, `fill()` etc.


Desenare și modificări
======================

Puteți desena, puteți scrie. Toate funcțiile PHP pentru lucrul cu imagini vă stau la dispoziție, vezi [#Prezentare generală a metodelor], dar într-o formă orientată pe obiecte:

```php
$image->filledEllipse($centerX, $centerY, $width, $height, ImageColor::rgb(255, 0, 0));
```

Deoarece funcțiile PHP pentru desenarea dreptunghiurilor sunt nepractice din cauza modului de specificare a coordonatelor, clasa `Image` oferă înlocuitori sub forma funcțiilor [#rectangleWH()] și [#filledRectangleWH()].


Combinarea mai multor imagini
=============================

O altă imagine poate fi inserată cu ușurință în imaginea curentă:

```php
$logo = Image::fromFile('logo.png');
$blank = Image::fromBlank(320, 240, ImageColor::rgb(52, 132, 210));

// coordonatele pot fi specificate din nou în procente
$blank->place($logo, '80%', '80%'); // inserăm lângă colțul din dreapta jos
```

La inserare, canalul alfa este respectat; în plus, putem influența opacitatea imaginii inserate (creăm un așa-numit watermark):

```php
$blank->place($image, '80%', '80%', 25); // opacitatea este de 25 %
```

Un astfel de API este cu adevărat o plăcere de utilizat!


Prezentare generală a metodelor
===============================


static fromBlank(int $width, int $height, ?ImageColor $color=null): Image .[method]
-----------------------------------------------------------------------------------
Creează o nouă imagine true color cu dimensiunile specificate. Culoarea implicită este negru.


static fromFile(string $file, int &$detectedFormat=null): Image .[method]
-------------------------------------------------------------------------
Încarcă o imagine dintr-un fișier și returnează [tipul |#Formate] acesteia în `$detectedFormat`.


static fromString(string $s, int &$detectedFormat=null): Image .[method]
------------------------------------------------------------------------
Încarcă o imagine dintr-un șir și returnează [tipul |#Formate] acesteia în `$detectedFormat`.


static rgb(int $red, int $green, int $blue, int $transparency=0): array .[method][deprecated]
---------------------------------------------------------------------------------------------
Această funcție a fost înlocuită de clasa `ImageColor`, vezi [#Culori].


static typeToExtension(int $type): string .[method]
---------------------------------------------------
Returnează extensia fișierului pentru [tipul |#Formate] specificat.


static typeToMimeType(int $type): string .[method]
--------------------------------------------------
Returnează tipul MIME pentru [tipul |#Formate] specificat.


static extensionToType(string $extension): int .[method]
--------------------------------------------------------
Returnează [tipul |#Formate] imaginii în funcție de extensia fișierului.


static detectTypeFromFile(string $file, int &$width=null, int &$height=null): ?int .[method]
--------------------------------------------------------------------------------------------
Returnează [tipul |#Formate] imaginii și, în parametrii `$width` și `$height`, și dimensiunile acesteia.


static detectTypeFromString(string $s, int &$width=null, int &$height=null): ?int .[method]
-------------------------------------------------------------------------------------------
Returnează [tipul |#Formate] imaginii dintr-un șir și, în parametrii `$width` și `$height`, și dimensiunile acesteia.


static isTypeSupported(int $type): bool .[method]
-------------------------------------------------
Verifică dacă [tipul |#Formate] de imagine specificat este acceptat.


static getSupportedTypes(): array .[method]{data-version:4.0.4}
---------------------------------------------------------------
Returnează un array de [tipuri |#Formate] de imagine acceptate.


static calculateTextBox(string $text, string $fontFile, float $size, float $angle=0, array $options=[]): array .[method]
------------------------------------------------------------------------------------------------------------------------
Calculează dimensiunile dreptunghiului care înconjoară textul într-un anumit font și dimensiune. Returnează un array asociativ care conține cheile `left`, `top`, `width`, `height`. Marginea stângă poate fi negativă dacă textul începe cu un kern stâng.


affine(array $affine, ?array $clip=null): Image .[method]
---------------------------------------------------------
Returnează o imagine care conține imaginea sursă transformată afin, folosind o zonă de decupare opțională. ([mai mult |https://www.php.net/manual/en/function.imageaffine]).


affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Returnează concatenarea a două matrici de transformare afină, ceea ce este util dacă mai multe transformări ar trebui aplicate simultan aceleiași imagini. ([mai mult |https://www.php.net/manual/en/function.imageaffinematrixconcat])


affineMatrixGet(int $type, mixed $options=null): array .[method]
----------------------------------------------------------------
Returnează o matrice de transformare afină. ([mai mult |https://www.php.net/manual/en/function.imageaffinematrixget])


alphaBlending(bool $on): void .[method]
---------------------------------------
Permite două moduri diferite de desenare în imagini truecolor. În modul de amestecare, componenta canalului alfa a culorii utilizate în toate funcțiile de desenare, cum ar fi `setPixel()`, determină în ce măsură ar trebui să fie permisă transparența culorii de bază. Ca rezultat, culoarea existentă în acel punct este amestecată automat cu culoarea desenată, iar rezultatul este salvat în imagine. Pixelul rezultat este opac. În modul fără amestecare, culoarea desenată este copiată literal cu informațiile canalului alfa și înlocuiește pixelul țintă. Modul de amestecare nu este disponibil la desenarea pe imagini cu paletă. ([mai mult |https://www.php.net/manual/en/function.imagealphablending])


antialias(bool $on): void .[method]
-----------------------------------
Activează desenarea cu antialiasing pentru linii și poligoane. Nu suportă canale alfa. Funcționează numai cu imagini truecolor.

Utilizarea primitivelor cu antialiasing împreună cu o culoare de fundal transparentă poate duce la rezultate neașteptate. Metoda de amestecare tratează culoarea de fundal ca pe orice altă culoare. ([mai mult |https://www.php.net/manual/en/function.imageantialias])


arc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color): void .[method]
---------------------------------------------------------------------------------------------------------------------------
Desenează un arc de cerc centrat la coordonatele date. ([mai mult |https://www.php.net/manual/en/function.imagearc])


colorAllocate(int $red, int $green, int $blue): int .[method]
-------------------------------------------------------------
Returnează un identificator de culoare reprezentând culoarea compusă din componentele RGB date. Trebuie apelată pentru a crea fiecare culoare care urmează să fie utilizată în imagine. ([mai mult |https://www.php.net/manual/en/function.imagecolorallocate])


colorAllocateAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
------------------------------------------------------------------------------
Se comportă la fel ca `colorAllocate()`, adăugând parametrul de transparență `$alpha`. ([mai mult |https://www.php.net/manual/en/function.imagecolorallocatealpha])


colorAt(int $x, int $y): int .[method]
--------------------------------------
Returnează indexul culorii pixelului de la locația specificată în imagine. Dacă imaginea este truecolor, această funcție returnează valoarea RGB a acelui pixel ca număr întreg. Utilizați operații de deplasare și mascare a biților pentru a accesa valorile individuale ale componentelor roșu, verde și albastru. ([mai mult |https://www.php.net/manual/en/function.imagecolorat])


colorClosest(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Returnează indexul culorii din paleta imaginii care este „cea mai apropiată” de valoarea RGB specificată. "Distanța" dintre culoarea dorită și fiecare culoare din paletă este calculată ca și cum valorile RGB ar reprezenta puncte într-un spațiu tridimensional. ([mai mult |https://www.php.net/manual/en/function.imagecolorclosest])


colorClosestAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Returnează indexul culorii din paleta imaginii care este „cea mai apropiată” de valoarea RGB specificată și nivelul `$alpha`. ([mai mult |https://www.php.net/manual/en/function.imagecolorclosestalpha])


colorClosestHWB(int $red, int $green, int $blue): int .[method]
---------------------------------------------------------------
Obține indexul culorii care are nuanța, albul și negrul cel mai apropiate de culoarea dată. ([mai mult |https://www.php.net/manual/en/function.imagecolorclosesthwb])


colorDeallocate(int $color): void .[method]
-------------------------------------------
Dealocă o culoare alocată anterior folosind `colorAllocate()` sau `colorAllocateAlpha()`. ([mai mult |https://www.php.net/manual/en/function.imagecolordeallocate])


colorExact(int $red, int $green, int $blue): int .[method]
----------------------------------------------------------
Returnează indexul culorii specificate în paleta imaginii. ([mai mult |https://www.php.net/manual/en/function.imagecolorexact])


colorExactAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
---------------------------------------------------------------------------
Returnează indexul culorii specificate + alfa în paleta imaginii. ([mai mult |https://www.php.net/manual/en/function.imagecolorexactalpha])


colorMatch(Image $image2): void .[method]
-----------------------------------------
Potrivește culorile paletei imaginii curente cu cele ale imaginii `$image2`. ([mai mult |https://www.php.net/manual/en/function.imagecolormatch])


colorResolve(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Returnează indexul culorii pentru culoarea solicitată, fie culoarea exactă, fie cea mai apropiată alternativă posibilă. ([mai mult |https://www.php.net/manual/en/function.imagecolorresolve])


colorResolveAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Returnează indexul culorii pentru culoarea solicitată, fie culoarea exactă, fie cea mai apropiată alternativă posibilă. ([mai mult |https://www.php.net/manual/en/function.imagecolorresolvealpha])


colorSet(int $index, int $red, int $green, int $blue): void .[method]
---------------------------------------------------------------------
Setează culoarea specificată la indexul dat în paletă. ([mai mult |https://www.php.net/manual/en/function.imagecolorset])


colorsForIndex(int $index): array .[method]
-------------------------------------------
Obține culoarea pentru indexul specificat. ([mai mult |https://www.php.net/manual/en/function.imagecolorsforindex])


colorsTotal(): int .[method]
----------------------------
Returnează numărul total de culori din paleta imaginii. ([mai mult |https://www.php.net/manual/en/function.imagecolorstotal])


colorTransparent(?int $color=null): int .[method]
-------------------------------------------------
Obține sau setează culoarea transparentă în imagine. ([mai mult |https://www.php.net/manual/en/function.imagecolortransparent])


convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Aplică o matrice de convoluție imaginii, folosind coeficientul și offset-ul dat. ([mai mult |https://www.php.net/manual/en/function.imageconvolution])

.[note]
Necesită prezența extensiei *Bundled GD*, deci s-ar putea să nu funcționeze peste tot.


copy(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH): void .[method]
--------------------------------------------------------------------------------------------------
Copiază o parte din `$src` în imagine începând de la coordonatele `$srcX`, `$srcY` cu lățimea `$srcW` și înălțimea `$srcH`. Partea definită va fi copiată la coordonatele `$dstX` și `$dstY`. ([mai mult |https://www.php.net/manual/en/function.imagecopy])


copyMerge(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
---------------------------------------------------------------------------------------------------------------------
Copiază o porțiune din imaginea `$src` în imaginea curentă, similar cu `copy()`, dar îmbină pixelii sursă și destinație în funcție de `$opacity`. ([mai mult |https://www.php.net/manual/en/function.imagecopymerge])


copyMergeGray(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
-------------------------------------------------------------------------------------------------------------------------
Copiază o porțiune din imaginea `$src` în imaginea curentă. Această funcție este identică cu `copyMerge()`, cu excepția faptului că, la îmbinare, păstrează nuanța sursei prin conversia pixelilor țintă la scară de gri înainte de operația de copiere.

([mai mult |https://www.php.net/manual/en/function.imagecopymergegray])


copyResampled(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
---------------------------------------------------------------------------------------------------------------------------------
Copiază o porțiune dreptunghiulară dintr-o imagine în alta, interpolând lin valorile pixelilor. Acest lucru asigură o claritate mai bună, în special la micșorarea imaginii.

Pe scurt, `copyResampled()` ia o zonă dreptunghiulară din `$src` (lățime `$srcW`, înălțime `$srcH`, poziție (`$srcX`, `$srcY`)) și o plasează într-o zonă dreptunghiulară a imaginii curente (lățime `$dstW`, înălțime `$dstH`, poziție (`$dstX`, `$dstY`)).

Dacă dimensiunile și coordonatele sursă și țintă diferă, se efectuează extinderea sau micșorarea corespunzătoare a fragmentului de imagine. Coordonatele se referă la colțul din stânga sus. Funcția poate fi utilizată pentru a copia zone în aceeași imagine, dar rezultatele pot fi imprevizibile dacă zonele se suprapun. ([mai mult |https://www.php.net/manual/en/function.imagecopyresampled])


copyResized(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
-------------------------------------------------------------------------------------------------------------------------------
Pe scurt, `copyResized()` ia o zonă dreptunghiulară din `$src` (lățime `$srcW`, înălțime `$srcH`, poziție (`$srcX`, `$srcY`)) și o plasează într-o zonă dreptunghiulară a imaginii curente (lățime `$dstW`, înălțime `$dstH`, poziție (`$dstX`, `$dstY`)).

Dacă dimensiunile și coordonatele sursă și țintă diferă, se efectuează extinderea sau micșorarea corespunzătoare a fragmentului de imagine. Coordonatele se referă la colțul din stânga sus. Funcția poate fi utilizată pentru a copia zone în aceeași imagine, dar rezultatele pot fi imprevizibile dacă zonele se suprapun. ([mai mult |https://www.php.net/manual/en/function.imagecopyresized])


crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Decupează imaginea la zona dreptunghiulară specificată. Dimensiunile pot fi specificate ca numere întregi în pixeli sau șiruri de caractere reprezentând procente (de exemplu, `'50%'`).


cropAuto(int $mode=-1, float $threshold=.5, ?ImageColor $color=null): Image .[method]
-------------------------------------------------------------------------------------
Decupează automat imaginea în funcție de `$mode` specificat. ([mai mult |https://www.php.net/manual/en/function.imagecropauto])


ellipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------
Desenează o elipsă centrată la coordonatele specificate. ([mai mult |https://www.php.net/manual/en/function.imageellipse])


fill(int $x, int $y, ImageColor $color): void .[method]
-------------------------------------------------------
Umple o regiune începând de la coordonata specificată (`$x`, `$y`; stânga sus este 0, 0) cu culoarea `$color`. ([mai mult |https://www.php.net/manual/en/function.imagefill])


filledArc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color, int $style): void .[method]
---------------------------------------------------------------------------------------------------------------------------------------------
Desenează un arc parțial umplut, centrat la coordonatele specificate. ([mai mult |https://www.php.net/manual/en/function.imagefilledarc])


filledEllipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------------
Desenează o elipsă umplută, centrată la coordonatele specificate. ([mai mult |https://www.php.net/manual/en/function.imagefilledellipse])


filledPolygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------------
Creează un poligon umplut în imagine. `$points` este un array de coordonate (x0, y0, x1, y1, ...). ([mai mult |https://www.php.net/manual/en/function.imagefilledpolygon])


filledRectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------
Creează un dreptunghi umplut cu `$color` în imagine, având colțurile opuse la (`$x1`, `$y1`) și (`$x2`, `$y2`). Punctul (0, 0) este colțul din stânga sus al imaginii. ([mai mult |https://www.php.net/manual/en/function.imagefilledrectangle])


filledRectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------------
Creează un dreptunghi umplut cu `$color` în imagine, începând de la punctul (`$left`, `$top`) cu lățimea `$width` și înălțimea `$height`. Punctul (0, 0) este colțul din stânga sus al imaginii.


fillToBorder(int $x, int $y, int $border, ImageColor $color): void .[method]
----------------------------------------------------------------------------
Realizează o umplere (flood fill) a cărei culoare de margine este definită de `$border`. Punctul de pornire al umplerii este (`$x`, `$y`) (stânga sus este 0, 0), iar zona este umplută cu culoarea `$color`. ([mai mult |https://www.php.net/manual/en/function.imagefilltoborder])


filter(int $filtertype, int ...$args): void .[method]
-----------------------------------------------------
Aplică filtrul specificat `$filtertype` imaginii. Argumentele suplimentare `$args` depind de tipul filtrului. ([mai mult |https://www.php.net/manual/en/function.imagefilter])


flip(int $mode): void .[method]
-------------------------------
Răstoarnă imaginea folosind modul `$mode` specificat (ex. `IMG_FLIP_HORIZONTAL`). ([mai mult |https://www.php.net/manual/en/function.imageflip])


ftText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
----------------------------------------------------------------------------------------------------------------------------------------
Scrie text în imagine folosind fonturi FreeType. ([mai mult |https://www.php.net/manual/en/function.imagefttext])


gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Aplică corecția gamma imaginii, transformând de la `$inputgamma` la `$outputgamma`. ([mai mult |https://www.php.net/manual/en/function.imagegammacorrect])


getClip(): array .[method]
--------------------------
Returnează zona de decupare curentă (clipping area), adică dreptunghiul în afara căruia nu vor fi desenați pixeli. ([mai mult |https://www.php.net/manual/en/function.imagegetclip])


getHeight(): int .[method]
--------------------------
Returnează înălțimea imaginii în pixeli.


getImageResource(): resource|GdImage .[method]
----------------------------------------------
Returnează resursa GD internă a imaginii.


getWidth(): int .[method]
-------------------------
Returnează lățimea imaginii în pixeli.


interlace(?int $interlace=null): int .[method]
----------------------------------------------
Activează sau dezactivează modul intercalat (interlacing). Dacă este activat și imaginea este salvată ca JPEG, va fi salvată ca JPEG progresiv. Returnează 1 dacă interlace bit este setat, 0 altfel. ([mai mult |https://www.php.net/manual/en/function.imageinterlace])


isTrueColor(): bool .[method]
-----------------------------
Verifică dacă imaginea este truecolor (spre deosebire de cele bazate pe paletă). ([mai mult |https://www.php.net/manual/en/function.imageistruecolor])


layerEffect(int $effect): void .[method]
----------------------------------------
Setează flag-ul de amestecare alfa pentru a utiliza efecte de stratificare (layer effects). ([mai mult |https://www.php.net/manual/en/function.imagelayereffect])


line(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
---------------------------------------------------------------------------
Desenează o linie între două puncte date. ([mai mult |https://www.php.net/manual/en/function.imageline])


openPolygon(array $points, ImageColor $color): void .[method]
-------------------------------------------------------------
Desenează un poligon deschis pe imagine. Spre deosebire de `polygon()`, nu se desenează nicio linie între ultimul și primul punct. ([mai mult |https://www.php.net/manual/en/function.imageopenpolygon])


paletteCopy(Image $source): void .[method]
------------------------------------------
Copiază paleta din imaginea `$source` în imaginea curentă. ([mai mult |https://www.php.net/manual/en/function.imagepalettecopy])


paletteToTrueColor(): void .[method]
------------------------------------
Convertește o imagine bazată pe paletă într-o imagine truecolor. ([mai mult |https://www.php.net/manual/en/function.imagepalettetotruecolor])


place(Image $image, int|string $left=0, int|string $top=0, int $opacity=100): Image .[method]
---------------------------------------------------------------------------------------------
Suprapune imaginea `$image` peste imaginea curentă la coordonatele (`$left`, `$top`). Coordonatele pot fi specificate ca numere întregi în pixeli sau șiruri de caractere reprezentând procente (de exemplu, `'50%'`). `$opacity` controlează transparența imaginii suprapuse (0-100).


polygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------
Creează un poligon închis în imagine. `$points` este un array de coordonate. ([mai mult |https://www.php.net/manual/en/function.imagepolygon])


rectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------
Desenează un dreptunghi cu colțurile opuse la coordonatele specificate. ([mai mult |https://www.php.net/manual/en/function.imagerectangle])


rectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------
Desenează un dreptunghi pornind de la coordonatele (`$left`, `$top`) cu lățimea `$width` și înălțimea `$height`.


resize(int|string $width, int|string $height, int $flags=Image::OrSmaller): Image .[method]
-------------------------------------------------------------------------------------------
Redimensionează imaginea, [mai multe informații |#Redimensionare]. Dimensiunile pot fi specificate ca numere întregi în pixeli sau șiruri de caractere reprezentând procente (de exemplu, `'50%'`).


resolution(?int $resX=null, ?int $resY=null): mixed .[method]
-------------------------------------------------------------
Setează sau returnează rezoluția imaginii în DPI (dots per inch). Dacă nu este specificat niciun parametru, returnează rezoluția curentă ca array indexat (`[x, y]`). Dacă este specificat doar `$resX`, rezoluția orizontală și verticală sunt setate la această valoare. Dacă sunt specificați ambii parametri, rezoluția orizontală și verticală sunt setate la aceste valori respective.

Rezoluția este utilizată doar ca meta-informație la citirea și scrierea imaginilor în formate care suportă aceste informații (în prezent PNG și JPEG). Nu afectează operațiile de desenare. Rezoluția implicită pentru imaginile noi este 96 DPI. ([mai mult |https://www.php.net/manual/en/function.imageresolution])


rotate(float $angle, int $backgroundColor): Image .[method]
-----------------------------------------------------------
Rotește imaginea cu unghiul `$angle` specificat în grade. Centrul de rotație este centrul imaginii. `$backgroundColor` specifică culoarea zonelor descoperite după rotație. Imaginea rotită poate avea dimensiuni diferite față de cea originală. ([mai mult |https://www.php.net/manual/en/function.imagerotate])

.[note]
Necesită prezența extensiei *Bundled GD*, deci s-ar putea să nu funcționeze peste tot.


save(string $file, ?int $quality=null, ?int $type=null): void .[method]
-----------------------------------------------------------------------
Salvează imaginea într-un fișier.

Calitatea compresiei este în intervalul 0..100 pentru JPEG (implicit 85), WEBP (implicit 80) și AVIF (implicit 30) și 0..9 pentru PNG (implicit 9). Dacă tipul nu este evident din extensia fișierului, îl puteți specifica folosind una dintre constantele `ImageType`.


saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Setează flag-ul care determină dacă informațiile complete ale canalului alfa trebuie păstrate la salvarea imaginilor PNG (spre deosebire de transparența cu o singură culoare).

Amestecarea alfa trebuie dezactivată (`alphaBlending(false)`) pentru a păstra canalul alfa. ([mai mult |https://www.php.net/manual/en/function.imagesavealpha])


scale(int $newWidth, int $newHeight=-1, int $mode=IMG_BILINEAR_FIXED): Image .[method]
--------------------------------------------------------------------------------------
Scalează imaginea folosind algoritmul de interpolare dat. ([mai mult |https://www.php.net/manual/en/function.imagescale])


send(int $type=ImageType::JPEG, ?int $quality=null): void .[method]
-------------------------------------------------------------------
Trimite imaginea către browser.

Calitatea compresiei este în intervalul 0..100 pentru JPEG (implicit 85), WEBP (implicit 80) și AVIF (implicit 30) și 0..9 pentru PNG (implicit 9).


setBrush(Image $brush): void .[method]
--------------------------------------
Setează imaginea pensulei care va fi utilizată în toate funcțiile de desenare a liniilor (de exemplu, `line()` și `polygon()`) la desenarea cu culorile speciale IMG_COLOR_BRUSHED sau IMG_COLOR_STYLEDBRUSHED. ([mai mult |https://www.php.net/manual/en/function.imagesetbrush])


setClip(int $x1, int $y1, int $x2, int $y2): void .[method]
-----------------------------------------------------------
Setează decuparea curentă, adică zona dincolo de care nu vor fi desenați pixeli. ([mai mult |https://www.php.net/manual/en/function.imagesetclip])


setInterpolation(int $method=IMG_BILINEAR_FIXED): void .[method]
----------------------------------------------------------------
Setează metoda de interpolare, care va afecta metodele `rotate()` și `affine()`. ([mai mult |https://www.php.net/manual/en/function.imagesetinterpolation])


setPixel(int $x, int $y, ImageColor $color): void .[method]
-----------------------------------------------------------
Desenează un pixel la coordonata specificată. ([mai mult |https://www.php.net/manual/en/function.imagesetpixel])


setStyle(array $style): void .[method]
--------------------------------------
Setează stilul care trebuie utilizat de toate funcțiile de desenare a liniilor (de exemplu, `line()` și `polygon()`) la desenarea cu culoarea specială IMG_COLOR_STYLED sau a liniilor de imagini cu culoarea IMG_COLOR_STYLEDBRUSHED. ([mai mult |https://www.php.net/manual/en/function.imagesetstyle])


setThickness(int $thickness): void .[method]
--------------------------------------------
Setează grosimea liniilor la desenarea dreptunghiurilor, poligoanelor, arcelor etc. la `$thickness` pixeli. ([mai mult |https://www.php.net/manual/en/function.imagesetthickness])


setTile(Image $tile): void .[method]
------------------------------------
Setează imaginea mozaicului care va fi utilizată în toate funcțiile de umplere a regiunilor (de exemplu, `fill()` și `filledPolygon()`) la umplerea cu culoarea specială IMG_COLOR_TILED.

Un mozaic este o imagine utilizată pentru a umple o zonă cu un model repetitiv. Orice imagine poate fi utilizată ca mozaic. Setând o culoare transparentă pentru imaginea mozaic folosind `colorTransparent()`, se poate crea un mozaic prin care anumite părți ale zonei de dedesubt vor fi vizibile. ([mai mult |https://www.php.net/manual/en/function.imagesettile])


sharpen(): Image .[method]
--------------------------
Ascute imaginea.

.[note]
Necesită prezența extensiei *Bundled GD*, deci s-ar putea să nu funcționeze peste tot.


toString(int $type=ImageType::JPEG, ?int $quality=null): string .[method]
-------------------------------------------------------------------------
Returnează conținutul imaginii sub formă de șir.

Calitatea compresiei este în intervalul 0..100 pentru JPEG (implicit 85), WEBP (implicit 80) și AVIF (implicit 30) și 0..9 pentru PNG (implicit 9).


trueColorToPalette(bool $dither, int $ncolors): void .[method]
--------------------------------------------------------------
Convertește o imagine truecolor într-o imagine cu paletă. ([mai mult |https://www.php.net/manual/en/function.imagetruecolortopalette])


ttfText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
-----------------------------------------------------------------------------------------------------------------------------------------
Scrie textul dat în imagine folosind fonturi TrueType. ([mai mult |https://www.php.net/manual/en/function.imagettftext])
