Codierungsstandard
******************

Dieses Dokument beschreibt die Regeln und Empfehlungen für die Entwicklung von Nette. Wenn Sie Code zu Nette beitragen, müssen Sie diese einhalten. Der einfachste Weg, dies zu tun, ist, den vorhandenen Code nachzuahmen. Ziel ist es, dass der gesamte Code so aussieht, als wäre er von einer einzigen Person geschrieben worden.

Der Nette Codierungsstandard entspricht dem [PSR-12 Extended Coding Style |https://www.php-fig.org/psr/psr-12/] mit zwei Hauptausnahmen: Er verwendet [#Tabulatoren statt Leerzeichen] für die Einrückung und [PascalCase für Klassenkonstanten|https://blog.nette.org/de/fuer-weniger-geschrei-im-code].


Allgemeine Regeln
=================

- Jede PHP-Datei muss `declare(strict_types=1)` enthalten.
- Zwei Leerzeilen werden verwendet, um Methoden zur besseren Lesbarkeit voneinander zu trennen.
- Der Grund für die Verwendung des Shut-up-Operators (`@`) muss dokumentiert werden: `@mkdir($dir); // @ - Verzeichnis kann bereits existieren`.
- Wenn ein schwach typisierter Vergleichsoperator verwendet wird (d. h. `==`, `!=`, ...), muss die Absicht dokumentiert werden: `// == null akzeptieren`
- In eine einzige Datei `exceptions.php` können mehrere Ausnahmeklassen geschrieben werden.
- Bei Schnittstellen wird die Sichtbarkeit von Methoden nicht angegeben, da sie immer `public` sind.
- Jede Eigenschaft, jeder Rückgabewert und jeder Parameter muss einen Typ angegeben haben. Bei `final` Konstanten geben wir den Typ jedoch nie an, da er offensichtlich ist.
- Zum Begrenzen von Zeichenketten sollten einfache Anführungszeichen verwendet werden, es sei denn, das Literal selbst enthält Apostrophe.


Benennungskonventionen
======================

- Verwenden Sie keine Abkürzungen, es sei denn, der vollständige Name ist zu lang.
- Verwenden Sie bei zweibuchstabigen Abkürzungen Großbuchstaben (z.B. `IO`), bei längeren Abkürzungen PascalCase oder camelCase (z.B. `XmlRpc`).
- Verwenden Sie für den Klassennamen ein Substantiv oder eine Wortgruppe.
- Klassennamen müssen nicht nur die Spezifität (`Array`), sondern auch die Allgemeinheit (`ArrayIterator`) enthalten. Ausnahmen sind PHP-Attribute.
- [Klassenkonstanten und Enums sollten PascalCase verwenden |https://blog.nette.org/de/fuer-weniger-geschrei-im-code].
- [Schnittstellen und abstrakte Klassen sollten keine Präfixe oder Suffixe enthalten |https://blog.nette.org/de/praefixe-und-suffixe-gehoeren-nicht-in-interface-namen] wie `Abstract`, `Interface` oder `I`.


Umbrüche und Klammern
=====================

Der Nette Codierungsstandard entspricht PSR-12 (bzw. PER Coding Style), ergänzt oder modifiziert ihn jedoch in einigen Punkten:

- Pfeilfunktionen werden ohne Leerzeichen vor der öffnenden Klammer geschrieben, d.h. `fn($a) => $b`
- Es ist keine Leerzeile zwischen verschiedenen Typen von `use`-Importanweisungen erforderlich.
- Der Rückgabetyp einer Funktion/Methode und die öffnende geschweifte Klammer stehen immer auf separaten Zeilen:

```php
	public function find(
		string $dir,
		array $options,
	): array
	{
		// Methodenkörper
	}
```

Die öffnende geschweifte Klammer auf einer separaten Zeile ist wichtig für die visuelle Trennung der Signatur der Funktion/Methode vom Körper. Wenn die Signatur auf einer Zeile steht, ist die Trennung deutlich (Bild links). Wenn sie auf mehreren Zeilen steht, verschmelzen in PSR Signatur und Körper (Mitte), während sie im Nette-Standard weiterhin getrennt sind (rechts):

[* new-line-after.webp *]


Dokumentationsblöcke (phpDoc)
=============================

Hauptregel: Duplizieren Sie niemals Informationen aus der Signatur (wie Parametertyp oder Rückgabetyp) im Docblock, es sei denn, Sie fügen zusätzliche Informationen hinzu.

Dokumentationsblock für eine Klassendefinition:

- Beginnt mit der Beschreibung der Klasse.
- Gefolgt von einer Leerzeile.
- Gefolgt von `@property`-Annotationen (oder `@property-read`, `@property-write`), eine nach der anderen. Syntax: Annotation, Leerzeichen, Typ, Leerzeichen, `$name`.
- Gefolgt von `@method`-Annotationen, eine nach der anderen. Syntax: Annotation, Leerzeichen, Rückgabetyp, Leerzeichen, `methodName(Typ $param, ...)`.
- Die `@author`-Annotation wird weggelassen. Die Autorschaft wird in der Quellcode-Historie gespeichert.
- Die Annotationen `@internal` oder `@deprecated` können verwendet werden.

```php
/**
 * Repräsentiert einen Teil einer MIME-Nachricht.
 *
 * @property string $encoding
 * @property-read array $headers
 * @method string getSomething(string $name)
 * @method static bool isEnabled()
 */
```

Ein Dokumentationsblock für eine Eigenschaft, der nur die Annotation `@var` enthält, sollte einzeilig sein:

```php
/** @var string[] */
private array $name;
```

Dokumentationsblock für eine Methodendefinition:

- Beginnt mit einer kurzen Beschreibung der Methode.
- Keine Leerzeile danach.
- `@param`-Annotationen, jede in einer eigenen Zeile.
- `@return`-Annotation.
- `@throws`-Annotationen, eine nach der anderen.
- Die Annotationen `@internal` oder `@deprecated` können verwendet werden.

Auf jede Annotation folgt ein Leerzeichen, mit Ausnahme von `@param`, auf das zur besseren Lesbarkeit zwei Leerzeichen folgen.

```php
/**
 * Findet eine Datei in einem Verzeichnis.
 * @param  string[]  $options
 * @return string[]
 * @throws DirectoryNotFoundException
 */
public function find(string $dir, array $options): array
```


Tabulatoren statt Leerzeichen
=============================

Tabulatoren haben gegenüber Leerzeichen mehrere Vorteile:

- Die Größe der Einrückung kann in Editoren und im [Web |https://developer.mozilla.org/en-US/docs/Web/CSS/tab-size] angepasst werden.
- Sie zwingen dem Code nicht die vom Benutzer bevorzugte Einrückungsgröße auf, sodass der Code besser portierbar ist.
- Sie können mit einem einzigen Tastendruck geschrieben werden (überall, nicht nur in Editoren, die Tabulatoren in Leerzeichen umwandeln).
- Einrückung ist ihr Zweck.
- Sie respektieren die Bedürfnisse von sehbehinderten und blinden Kollegen.

Durch die Verwendung von Tabulatoren in unseren Projekten ermöglichen wir die Anpassung der Breite, was den meisten Menschen als unnötig erscheinen mag, aber für Menschen mit Sehbehinderungen unerlässlich ist.

Für blinde Programmierer, die Braillezeilen verwenden, stellt jedes Leerzeichen eine Braillezelle dar. Wenn also die Standardeinrückung 4 Leerzeichen beträgt, verschwendet die Einrückung der 3. Ebene 12 wertvolle Braillezellen, noch bevor der Code beginnt. Auf einem 40-Zellen-Display, das bei Laptops am häufigsten verwendet wird, ist das mehr als ein Viertel der verfügbaren Zellen, die ohne jegliche Information verschwendet werden.


{{priority: -1}}
